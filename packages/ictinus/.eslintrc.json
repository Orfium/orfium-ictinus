{
  "extends": [
    "eslint:recommended",
    "prettier",
    "plugin:@typescript-eslint/recommended",
    "plugin:react-hooks/recommended",
    "plugin:react/recommended",
    "plugin:import/typescript"
  ],
  "plugins": ["react", "@emotion", "@typescript-eslint", "import", "unused-imports"],
  "env": {
    "node": true,
    "browser": true,
    "jasmine": true,
    "jest": true,
    "es6": true
  },
  "rules": {
    "no-unused-vars": "off", // or "@typescript-eslint/no-unused-vars": "off",
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": [
      "warn",
      { "vars": "all", "varsIgnorePattern": "^_", "args": "after-used", "argsIgnorePattern": "^_" }
    ],
    "@typescript-eslint/consistent-type-imports": "error",
    "react/no-unknown-property": ["error", { "ignore": ["css"] }],
    /* React rules */
    "react/no-direct-mutation-state": "error",
    "react/no-unused-prop-types": "warn",
    "react/self-closing-comp": [
      "warn",
      {
        "component": true,
        "html": true
      }
    ],
    "react/prop-types": "off",
    "react/button-has-type": "warn",

    "@typescript-eslint/no-explicit-any": "off",
    "react/no-array-index-key": "warn",
    "react/no-render-return-value": 0,
    /* JSX rules */
    "react/jsx-key": "error",
    "react/jsx-curly-brace-presence": ["error", "never"],
    // Since we are using React 17+ we no longer need these
    "react/jsx-uses-react": "off",
    "react/react-in-jsx-scope": "off",
    "react/no-children-prop": "off",

    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    /* eslint basic rules */
    "padding-line-between-statements": [
      "error",
      {
        "blankLine": "always",
        "prev": "function",
        "next": "*"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "function"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      }
    ],
    // Disable this in favour of @typescript-eslint/no-unused-expressions
    // so that function calls with optional chaining do not throw warnings
    // https://github.com/facebook/create-react-app/issues/8107#issuecomment-565365982
    //    "no-unused-expressions": "warn",
    "no-debugger": "warn",
    "no-console": "warn",
    /* Typescript rules */
    "@typescript-eslint/naming-convention": [
      "warn",
      {
        "selector": ["variable", "parameter", "property"],
        "types": ["boolean"],
        "format": ["PascalCase"], // As per documentation, prefix is trimmed before checking for format , so we need pascal case for values like `isBoolean`  https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.md#format-options
        "prefix": ["is", "has"]
      }
    ],
    "@typescript-eslint/no-unused-expressions": "warn",
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "args": "all",
        "argsIgnorePattern": "^__",
        "varsIgnorePattern": "^__|React"
      }
    ],
    "@typescript-eslint/ban-ts-ignore": 0,
    "@typescript-eslint/no-empty-function": 0,
    "@typescript-eslint/camelcase": 0,
    "@typescript-eslint/prefer-interface": 0,
    "@typescript-eslint/no-inferrable-types": 0,
    "@typescript-eslint/explicit-member-accessibility": 0,
    "@typescript-eslint/explicit-function-return-type": 0,
    "@typescript-eslint/ban-ts-comment": "warn"
  },
  "settings": {
    "react": {
      "pragma": "React",
      "version": "detect"
    },
    "import/resolver": {
      "typescript": {
        "project": "./tsconfig.json"
      }
    }
  },
  "parser": "@typescript-eslint/parser",
  "ignorePatterns": ["rollup.config.js"],
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 2022,
    "sourceType": "module",
    "project": ["./tsconfig.json", "./tsconfig.node.json"]
  }
}
