import { breakpoints, vars } from '@orfium/tokens';
import { defineProperties } from '@vanilla-extract/sprinkles';

import { layers } from '../layers';

// Ensure global has lowest specificity
/* DO NOT MOVE THIS LINE */
import '../vanilla-extract/global.css';
/* DO NOT MOVE THIS LINE */

// Flattened colors for sprinkles - autogenerating them here breaks autocomplete
// Can also supply them flattened from the actual tokens to avoid duplication
const colors = {
  'neutral.1': vars.color.neutral['1'],
  'neutral.2': vars.color.neutral['2'],
  'neutral.3': vars.color.neutral['3'],
  'neutral.4': vars.color.neutral['4'],
  'neutral.5': vars.color.neutral['5'],
  'neutral.6': vars.color.neutral['6'],
  'blue.1': vars.color.blue['1'],
  'blue.2': vars.color.blue['2'],
  'blue.3': vars.color.blue['3'],
  'blue.4': vars.color.blue['4'],
  'blue.5': vars.color.blue['5'],
  'blue.6': vars.color.blue['6'],
  'blue.7': vars.color.blue['7'],
  'blue.8': vars.color.blue['8'],
  'blue.9': vars.color.blue['9'],
  'blue.10': vars.color.blue['10'],
  'red.1': vars.color.red['1'],
  'red.4': vars.color.red['4'],
  'red.5': vars.color.red['5'],
  'red.6': vars.color.red['6'],
  'red.7': vars.color.red['7'],
  'red.8': vars.color.red['8'],
  'red.9': vars.color.red['9'],
  'red.10': vars.color.red['10'],
  'teal.1': vars.color.teal['1'],
  'teal.4': vars.color.teal['4'],
  'teal.5': vars.color.teal['5'],
  'teal.6': vars.color.teal['6'],
  'teal.7': vars.color.teal['7'],
  'teal.8': vars.color.teal['8'],
  'teal.9': vars.color.teal['9'],
  'teal.10': vars.color.teal['10'],
  'orange.1': vars.color.orange['1'],
  'orange.4': vars.color.orange['4'],
  'orange.5': vars.color.orange['5'],
  'orange.6': vars.color.orange['6'],
  'orange.7': vars.color.orange['7'],
  'orange.8': vars.color.orange['8'],
  'orange.9': vars.color.orange['9'],
  'orange.10': vars.color.orange['10'],
  'purple.1': vars.color.purple['1'],
  'purple.4': vars.color.purple['4'],
  'purple.5': vars.color.purple['5'],
  'purple.6': vars.color.purple['6'],
  'purple.7': vars.color.purple['7'],
  'purple.8': vars.color.purple['8'],
  'purple.9': vars.color.purple['9'],
  'purple.10': vars.color.purple['10'],
} as const;

const colorTokens = {
  primary: vars.color.text.default.primary,
  secondary: vars.color.text.default.secondary,
  active: vars.color.text.default.active,
  error: vars.color.text.default.error,
  warning: vars.color.text.default.warning,
  success: vars.color.text.default.success,
  visited: vars.color.text.default.visited,
  'inverted.primary': vars.color.text.inverted.primary,
  'inverted.secondary': vars.color.text.inverted.secondary,
  'inverted.active': vars.color.text.inverted.active,
  'inverted.error': vars.color.text.inverted.error,
  'inverted.warning': vars.color.text.inverted.warning,
  'inverted.success': vars.color.text.inverted.success,
  'inverted.visited': vars.color.text.inverted.visited,
} as const;

const backgroundTokens = {
  default: vars.color.background.default,
  alt: vars.color.background.alt,
  inverted: vars.color.background.inverted,
  invertedAlt: vars.color.background.invertedAlt,
  transparent: 'transparent',
  'palette.primary': vars.color.palette.primary.base,
  'palette.primary.muted': vars.color.palette.primary.muted,
  'palette.primary.contrast': vars.color.palette.primary.contrast,
  'palette.secondary': vars.color.palette.secondary.base,
  'palette.secondary.muted': vars.color.palette.secondary.muted,
  'palette.secondary.contrast': vars.color.palette.secondary.contrast,
  'palette.tertiary': vars.color.palette.tertiary.base,
  'palette.tertiary.muted': vars.color.palette.tertiary.muted,
  'palette.tertiary.contrast': vars.color.palette.tertiary.contrast,
  'palette.error': vars.color.palette.error.base,
  'palette.error.muted': vars.color.palette.error.muted,
  'palette.error.contrast': vars.color.palette.error.contrast,
  'palette.warning': vars.color.palette.warning.base,
  'palette.warning.muted': vars.color.palette.warning.muted,
  'palette.warning.contrast': vars.color.palette.warning.contrast,
  'palette.success': vars.color.palette.success.base,
  'palette.success.muted': vars.color.palette.success.muted,
  'palette.success.contrast': vars.color.palette.success.contrast,
  'palette.upsell': vars.color.palette.upsell.base,
  'palette.upsell.muted': vars.color.palette.upsell.muted,
  'palette.upsell.contrast': vars.color.palette.upsell.contrast,
  'palette.primary-alt': vars.color.palette['primary-alt'].base,
  'palette.primary-alt.muted': vars.color.palette['primary-alt'].muted,
  'palette.primary-alt.contrast': vars.color.palette['primary-alt'].contrast,
  'backdrop.default': vars.color.backdrop.default,
  'backdrop.alt': vars.color.backdrop.alt,
} as const;

const borderTokens = {
  'decorative.transparent': vars.color['border-color'].decorative.transparent,
  'decorative.default': vars.color['border-color'].decorative.default,
  'decorative.inverted': vars.color['border-color'].decorative.inverted,
  'interactive.default': vars.color['border-color'].interactive.default,
  'interactive.active': vars.color['border-color'].interactive.active,
  'interactive.error': vars.color['border-color'].interactive.error,
  'interactive.upsell': vars.color['border-color'].interactive.upsell,
  'interactive.warning': vars.color['border-color'].interactive.warning,
  'interactive.success': vars.color['border-color'].interactive.success,
  'interactive.focused': vars.color['border-color'].interactive.focused,
} as const;

const indicatorTokens = {
  'indicator.brand': vars.color.indicators.brand,
  'indicator.success': vars.color.indicators.success,
  'indicator.pending': vars.color.indicators.pending,
  'indicator.warning': vars.color.indicators.warning,
  'indicator.error': vars.color.indicators.error,
  'indicator.inactive': vars.color.indicators.inactive,
} as const;

const typography = {
  headline01: {
    fontSize: vars['font-size'][10],
    lineHeight: vars['line-height'][10],
    fontWeight: vars.weight.bold,
    letterSpacing: vars['letter-spacing'][0],
  } as const,
  headline02: {
    fontSize: vars['font-size'][9],
    lineHeight: vars['line-height'][9],
    fontWeight: vars.weight.bold,
    letterSpacing: vars['letter-spacing'][0],
  } as const,
  headline03: {
    fontSize: vars['font-size'][8],
    lineHeight: vars['line-height'][8],
    fontWeight: vars.weight.bold,
    letterSpacing: vars['letter-spacing'][0],
  } as const,
  headline04: {
    fontSize: vars['font-size'][6],
    lineHeight: vars['line-height'][7],
    fontWeight: vars.weight.bold,
    letterSpacing: vars['letter-spacing'][0],
  } as const,
  headline05: {
    fontSize: vars['font-size'][5],
    lineHeight: vars['line-height'][6],
    fontWeight: vars.weight.bold,
    letterSpacing: vars['letter-spacing'][0],
  } as const,
  title01: {
    fontSize: vars['font-size'][4],
    lineHeight: vars['line-height'][5],
    fontWeight: vars.weight.bold,
    letterSpacing: vars['letter-spacing'][1],
  } as const,
  title02: {
    fontSize: vars['font-size'][3],
    lineHeight: vars['line-height'][4],
    fontWeight: vars.weight.bold,
    letterSpacing: vars['letter-spacing'][1],
  } as const,
  title03: {
    fontSize: vars['font-size'][2],
    lineHeight: vars['line-height'][2],
    fontWeight: vars.weight.bold,
    letterSpacing: vars['letter-spacing'][2],
  } as const,
  label01: {
    fontSize: vars['font-size'][4],
    lineHeight: vars['line-height'][5],
    fontWeight: vars.weight.medium,
    letterSpacing: vars['letter-spacing'][1],
  } as const,
  label02: {
    fontSize: vars['font-size'][3],
    lineHeight: vars['line-height'][4],
    fontWeight: vars.weight.medium,
    letterSpacing: vars['letter-spacing'][2],
  } as const,
  label03: {
    fontSize: vars['font-size'][2],
    lineHeight: vars['line-height'][2],
    fontWeight: vars.weight.medium,
    letterSpacing: vars['letter-spacing'][2],
  } as const,
  label04: {
    fontSize: vars['font-size'][1],
    lineHeight: vars['line-height'][1],
    fontWeight: vars.weight.medium,
    letterSpacing: vars['letter-spacing'][1],
  } as const,
  body01: {
    fontSize: vars['font-size'][4],
    lineHeight: vars['line-height'][5],
    fontWeight: vars.weight.regular,
    letterSpacing: vars['letter-spacing'][2],
  } as const,
  body02: {
    fontSize: vars['font-size'][3],
    lineHeight: vars['line-height'][4],
    fontWeight: vars.weight.regular,
    letterSpacing: vars['letter-spacing'][2],
  } as const,
  body03: {
    fontSize: vars['font-size'][2],
    lineHeight: vars['line-height'][2],
    fontWeight: vars.weight.regular,
    letterSpacing: vars['letter-spacing'][2],
  } as const,
  body04: {
    fontSize: vars['font-size'][1],
    lineHeight: vars['line-height'][1],
    fontWeight: vars.weight.regular,
    letterSpacing: vars['letter-spacing'][1],
  } as const,
} as const;

export const responsiveProps = defineProperties({
  '@layer': layers.utilities,
  defaultCondition: 'base',
  conditions: {
    base: {},
    md: { '@media': `(min-width: ${breakpoints.md}px)` },
    lg: { '@media': `(min-width: ${breakpoints.lg}px)` },
    xl: { '@media': `(min-width: ${breakpoints.xl}px)` },
  },
  properties: {
    alignItems: ['flex-start', 'center', 'flex-end', 'stretch', 'baseline'] as const,
    alignSelf: ['flex-start', 'center', 'flex-end', 'stretch', 'baseline'] as const,
    justifyContent: [
      'flex-start',
      'center',
      'flex-end',
      'space-between',
      'space-around',
      'space-evenly',
      'unset',
    ] as const,
    flexWrap: ['nowrap', 'wrap', 'wrap-reverse'] as const,
    display: [
      'block',
      'flex',
      'inline-flex',
      'inline-grid',
      'grid',
      'inline-block',
      'none',
      'contents',
    ] as const,
    flex: {
      '1': '1 1 0%',
      auto: '1 1 auto',
      initial: '0 1 auto',
      none: 'none',
    },
    width: { ...vars.sizing, full: '100%', screen: '100vw' },
    height: { ...vars.sizing, full: '100%', screen: '100vh' },
    minWidth: { ...vars.sizing, full: '100%', screen: '100vw' },
    minHeight: { ...vars.sizing, full: '100%', screen: '100vh' },
    maxWidth: { ...vars.sizing, full: '100%', screen: '100vw' },
    maxHeight: { ...vars.sizing, full: '100%', screen: '100vh' },
    flexDirection: ['column', 'row', 'column-reverse', 'row-reverse'] as const,
    flexShrink: ['0', '1'] as const,
    position: ['absolute', 'fixed', 'relative', 'sticky'] as const,
    gap: vars.spacing,
    gridGap: vars.spacing,
    margin: vars.spacing,
    marginBottom: vars.spacing,
    marginLeft: vars.spacing,
    marginRight: vars.spacing,
    marginTop: vars.spacing,
    padding: vars.spacing,
    paddingBottom: vars.spacing,
    paddingLeft: vars.spacing,
    paddingRight: vars.spacing,
    paddingTop: vars.spacing,
    borderTopWidth: vars['border-width'],
    borderRightWidth: vars['border-width'],
    borderBottomWidth: vars['border-width'],
    borderLeftWidth: vars['border-width'],
  },
  shorthands: {
    maxH: ['maxHeight'],
    maxW: ['maxWidth'],
    size: ['height', 'width'],
    w: ['width'],
    h: ['height'],
    p: ['padding'],
    pt: ['paddingTop'],
    pb: ['paddingBottom'],
    pl: ['paddingLeft'],
    pr: ['paddingRight'],
    px: ['paddingLeft', 'paddingRight'],
    py: ['paddingTop', 'paddingBottom'],
    m: ['margin'],
    mt: ['marginTop'],
    mb: ['marginBottom'],
    ml: ['marginLeft'],
    mr: ['marginRight'],
    mx: ['marginLeft', 'marginRight'],
    my: ['marginTop', 'marginBottom'],
    border: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
    borderB: ['borderBottomWidth'],
    borderL: ['borderLeftWidth'],
    borderR: ['borderRightWidth'],
    borderT: ['borderTopWidth'],
  },
});

export const unresponsiveProps = defineProperties({
  '@layer': layers.utilities,
  properties: {
    borderColor: borderTokens,
    borderStyle: ['solid', 'dashed'],
    borderRadius: vars['border-radius'],
    borderTopLeftRadius: vars['border-radius'],
    borderTopRightRadius: vars['border-radius'],
    borderBottomLeftRadius: vars['border-radius'],
    borderBottomRightRadius: vars['border-radius'],
    boxShadow: vars['box-shadow'],
    cursor: ['default', 'pointer', 'not-allowed'] as const,
    overflowX: ['auto', 'hidden', 'visible'] as const,
    overflowY: ['auto', 'hidden', 'visible'] as const,
    userSelect: ['none', 'all'] as const,
    touchAction: ['none', 'manipulation'] as const,
    fontFamily: vars.font,
    fontSize: vars['font-size'],
    typography,
    fontWeight: vars.weight,
    fontStyle: ['italic'] as const,
    lineHeight: vars['line-height'],
    letterSpacing: vars['letter-spacing'],
    isolation: ['isolate'] as const,
    objectFit: ['contain', 'cover'] as const,
    pointerEvents: ['auto', 'none'] as const,
    textTransform: ['capitalize', 'none', 'uppercase'] as const,
    textDecoration: ['underline'] as const,
    visibility: ['hidden', 'visible'] as const,
    wordBreak: ['break-all', 'break-word'] as const,
    wordWrap: ['normal', 'break-word'] as const,
    textAlign: ['end', 'start', 'center', 'justify'] as const,
    transitionProperty: {
      none: 'none',
      all: 'all',
      default:
        'background-color, border-color, color, fill, stroke, opacity, box-shadow, transform',
      colors: 'background-color, border-color, color, fill, stroke',
      opacity: 'opacity',
      shadow: 'box-shadow',
      transform: 'transform',
    },
    transitionTimingFunction: {
      linear: 'linear',
      ease: 'ease',
      in: 'cubic-bezier(0.4, 0, 1, 1)',
      out: 'cubic-bezier(0, 0, 0.2, 1)',
      inOut: 'cubic-bezier(0.42, 0, 0.58, 1)',
    },
    transitionDuration: ['150ms', '200ms'] as const,
    whiteSpace: ['nowrap'] as const,
    zIndex: {
      '0': 0,
      '10': 10,
      '20': 20,
      '30': 30,
      '40': 40,
      '50': 50,
      '75': 75,
      '100': 100,
      auto: 'auto',
    },
  },
  shorthands: {
    overflow: ['overflowX', 'overflowY'],
    shadow: ['boxShadow'],
    rounded: ['borderRadius'],
    roundedT: ['borderTopLeftRadius', 'borderTopRightRadius'],
    roundedB: ['borderBottomLeftRadius', 'borderBottomRightRadius'],
    roundedL: ['borderTopLeftRadius', 'borderBottomLeftRadius'],
    roundedR: ['borderTopRightRadius', 'borderBottomRightRadius'],
    z: ['zIndex'],
  },
});

export const colorProps = defineProperties({
  '@layer': layers.utilities,
  conditions: {
    base: {},
    active: { selector: '&:active' },
    focus: { selector: '&:focus' },
    hover: { selector: '&:hover' },
  },
  defaultCondition: 'base',
  properties: {
    backgroundColor: { ...backgroundTokens, ...indicatorTokens, ...colors },
    borderColor: { ...borderTokens, ...indicatorTokens, ...colors },
    color: { ...colorTokens, ...indicatorTokens, ...colors },
    outlineColor: { ...borderTokens, ...indicatorTokens, ...colors },
  },
  shorthands: {
    bg: ['backgroundColor'],
  },
});
