name: CI/CD
on:
  push:
    branches:
      - 'master'
      - 'next'
  pull_request:
    branches:
      - "*"
env:
  NODE_VERSION: '18.13'
  PROJECT: designlab
  # ^ Is important to note that the above is used as:
  #   * SENTRY project to deploy so naming must match
  #   * Repo badges creation and SENTRY
  MAIN_BRANCH: 'master'
  STAGING_BRANCH: 'next'

permissions:
  packages: write
  contents: read
  id-token: write

jobs:
  test:
    name: Run Tests ðŸ”¬
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ðŸ“¥
        uses: actions/checkout@v3

      - name: Get yarn cache ðŸ“¦
        id: yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - run: |
          yarn install
          yarn test --clearCache
          - name: Running tests and creating coverage report
          run: yarn test --passWithNoTests --watchAll=false --coverage --coverageReporters=json-summary

      - name: Update Lines Coverage badge
        uses: Orfium/coverage-badge-creator@master
        with:
        coverage_file: "coverage/coverage-summary.json"
        badge_name: code-cov/${{ env.PROJECT }}-lines-coverage.svg
        upload_coverage_file: "true"
        bucket_name: "orfium-badges-bucket"
        aws_access_key: ${{ secrets.BADGES_AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.BADGES_AWS_SECRET_ACCESS_KEY }}
        coverage_percentage_json_path: "total.lines.pct"
        if: github.ref == 'refs/heads/${{ env.STAGING_BRANCH }}'

      - name: Update Statements Coverage badge
        uses: Orfium/coverage-badge-creator@master
        with:
        coverage_file: "coverage/coverage-summary.json"
        badge_name: code-cov/${{ env.PROJECT }}-stmts-coverage.svg
        upload_coverage_file: "true"
        bucket_name: "orfium-badges-bucket"
        aws_access_key: ${{ secrets.BADGES_AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.BADGES_AWS_SECRET_ACCESS_KEY }}
        coverage_percentage_json_path: "total.statements.pct"
        if: github.ref == 'refs/heads/${{ env.STAGING_BRANCH }}'

      - name: Update Branches Coverage badge
        uses: Orfium/coverage-badge-creator@master
        with:
        coverage_file: "coverage/coverage-summary.json"
        badge_name: code-cov/${{ env.PROJECT }}-branches-coverage.svg
        upload_coverage_file: "true"
        bucket_name: "orfium-badges-bucket"
        aws_access_key: ${{ secrets.BADGES_AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.BADGES_AWS_SECRET_ACCESS_KEY }}
        coverage_percentage_json_path: "total.branches.pct"
        if: github.ref == 'refs/heads/${{ env.STAGING_BRANCH }}'

      - name: Update Functions Coverage badge
        uses: Orfium/coverage-badge-creator@master
        with:
        coverage_file: "coverage/coverage-summary.json"
        badge_name: code-cov/${{ env.PROJECT }}-funcs-coverage.svg
        upload_coverage_file: "true"
        bucket_name: "orfium-badges-bucket"
        aws_access_key: ${{ secrets.BADGES_AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.BADGES_AWS_SECRET_ACCESS_KEY }}
        coverage_percentage_json_path: "total.functions.pct"
        if: github.ref == 'refs/heads/${{ env.STAGING_BRANCH }}'

  select-deployment-target:
    runs-on: ubuntu-latest
    outputs:
      target: ${{ steps.get-target.outputs.target }}
    steps:
      - name: Checkout ðŸ“¥
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: get-target
        run: |
          TARGET=review
          if [[ ${{ github.event_name }} == "push" ]]; then
            # TODO: The conditions here depend on the different deployment targets you have
            if [[ ${{ github.ref }} == "refs/heads/master" ]]; then
              TARGET=prod
            elif [[ ${{ github.ref }} == "refs/heads/next" ]]; then
              TARGET=next
            fi
          else
            if [ ! -f .github/workflows/teardown.yml ]; then
              echo "Set up the teardown flow and try again!"
              exit 1
            fi
          fi
          echo "target=$TARGET" >> $GITHUB_OUTPUT

  deploy-app:
    needs:
      - select-deployment-target
      - test
    uses: Orfium/orfium-github-actions/.github/workflows/deploy-frontend.yml@master
    concurrency: ${{ github.ref }}
    with:
      target-environment: ${{ needs.select-deployment-target.outputs.target }}
    secrets:
      ORG_PGP_TOKEN: ${{ secrets.ORG_PGP_TOKEN }}

  deploy-docs:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    name: Deploy Docs
    runs-on: ubuntu-latest
    needs: deploy-app

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: yarn install

      - name: Generate docs
        run: yarn documentation:generate

      - name: Clone docs repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: Orfium/docs
          path: docs-repo
          ssh-key: ${{ secrets.DOCS_DEPLOY_KEY }}

      - name: Copy and commit docs
        run: |
          rm -rf $GITHUB_WORKSPACE/docs-repo/${GITHUB_REPOSITORY#*/}
          mkdir -p $GITHUB_WORKSPACE/docs-repo/${GITHUB_REPOSITORY#*/}
          cp -r typeDocs/* $GITHUB_WORKSPACE/docs-repo/${GITHUB_REPOSITORY#*/}/
          cd $GITHUB_WORKSPACE/docs-repo/
          git config --global user.email "github-service-account@orfium.com"
          git config --global user.name "orfium-org"
          git add .
          git commit -m "Update ${GITHUB_REPOSITORY#*/} docs"
          git push origin master

  release:
    needs:
      - deploy-app
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/next') && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get yarn cache ðŸ“¦
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn install

      - name: Release ðŸ“Œ
        if: "github.event_name == 'push'"
        env:
          GITHUB_NPM_CONFIG_REGISTRY: 'https://npm.pkg.github.com/'
          GITHUB_NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLIC_NPM_CONFIG_REGISTRY: 'https://registry.npmjs.org'
          PUBLIC_NPM_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
